# Redis
Обзорный вебинар о самой популярной kv базе данных в мире

## Базовая информация

Redis - in memory key data-structure store, которая очень широко используется во многих компаниях

Используется как кеш, распределённая kay-value  база данных, брокер сообщений и много как ещё.

В основе дизайна redis лежит идея, что данные всегда могут быть изменены и прочитаны из памяти, но при этом располагаться на диске в эффективном для хранения формате, но не для чтения.

Поэтому основная идея данных на диске  - восстановление данных в памяти на случай перезапуска системы.

Отличительной особенностью redis является так же наличие очень большого числа встроенных типов

От банального списка строк, заканчивая графами, time serial данными

## Персистентность данных

Достигается 2 способами
1. Снапшоты

    Интервальное Асихронное копирование данных из памяти на диск в виде бинарных дампов

2. Журналирование

    Каждая операция изменяющая данные записывается в append only file

## Репликация

Master-replica

Данные с любого севера могу быть реплецированны на любое число реплик, кроме того реплика может быть мастером для другой репилики

Эффективно решает проблемы  массивного чтения, но не решает проблемы записи

## Кластеризация

*Sentinel*

.image content/sentinel.png 450 _

## Кластеризация Sentinel

Плюсы:
- Достаточно 3-х нод, чтобы получить полноценную систему
- Прост в настройке
- Высокая доступность
- Будет жить пока жив main - потеря всех вспомогательных нод не влияет на доступность
- Несколько вспомогательных нод могут реплицировать данные с main

## Кластеризация Sentinel

Минусы:
- Не масштабируется - все записи идут в main, не решает проблему разделения запись/чтения
- Вспомогательные ноды решают проблему чтения, но из-за асинхронной репликации консистентность чтений не гарантируется
- Нет шардирования данных, поэтому нагрузка на main/secondary может быть неравномерна
- Вспомогательная нода - трата ресурсов, так как она не может быть запасной нодой
- Требует поддержки работы со стороны клиента


## Кластеризация Cluster

.image content/cluster.png 450 _

## Кластеризация Cluster

Плюсы:
- Нет единого центра отказа, данные распределяются между нодами
- Данные респределяются по нескольким нодам, согласно по хешу
- Масштабирвоание - добавление и удаление нод может происходить динамически
- Есть механизм автоматичекого failover-а

## Кластеризация Cluster

Минусы:
- Необходимо минимум 6 нод - 3 main и 3 secondary
- Не так надёжен - если большая часть кластера недоступна
- Репликация всё так же асинхронная - консистетность данных не гарантируется
- Из-за распределения данных между всеми нодами кластера - у клиента должна быть ссетевая доступность до всех main нод
- Не каждая клиентская библиотека поддерживает
- Не возможность иметь backup всех данных только с одного узла

## Базовая Производительность

Когда надежность данных не так важна позволяет показывать очень высокие результаты производительности, потому все данные находятся в памяти

Redis использует один процесс и один поток исполнения (два потока, если используется запись в append only log)

Поэтому один экземляр redis не может быть использован для паралельных задач, как например запуск хранимых процедур

## Полурярные клиентские библиотеки в Go

Весь список

 [https://redis.io/clients#go](https://redis.io/clients#go)

Самые популярные

1. [github.com/go-redis/redis](github.com/go-redis/redis)

2. [github.com/gomodule/redigo](github.com/gomodule/redigo)

## Запуск

- Через докер

```sh
docker run --name=rediswebinar -p 6379:6379 redis/
```

- Как демон

```sh
redis-server /usr/local/etc/redis.conf --daemonize yes
```